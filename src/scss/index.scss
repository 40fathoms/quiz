@import "variables";
@import "mixins";

@import "config";

main {
    position: relative;
    width: 100%;
    height: 100vh;
}

form {
    position: absolute;
    inset: 0;

    overflow-x: auto;

    padding: 4rem 0;

    display: flex;
    flex-direction: column;
    justify-content: flex-start;
    align-items: center;
    gap: 3rem;
}

.select {
    width: 95%;
    max-width: 400px;
}

.questions {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    gap: 2rem;
}

.question {

    color: $font;
    font-weight: 700;
    font-size: 0.85rem;

    width: 95%;
    max-width: 1000px;

    padding: 2rem 0;
    border-bottom: solid 1px $select;

    display: flex;
    flex-direction: column;
    gap: 1.5rem;

    @include breakpoint-up(medium) {
        font-size: 1.2rem;
    }

    h2 {
        font-weight: 700;
        margin: 0;
        text-align: center;

        @include breakpoint-up(medium) {
            text-align: start;
        }
    }

    &-options {

        margin: 0;
        padding: 0;
        border: none;
        position: relative;

        display: flex;
        flex-wrap: wrap;
        flex-direction: column;
        align-items: center;
        justify-content: flex-start;
        gap: 2rem;

        @include breakpoint-up(medium) {
            flex-direction: row;
        }

        &>input[type="radio"] {
            display: none;
        }

        /*
        causes a visual bug that causes the options to 
        appear selected when restarting a game

        &>input[type="radio"]:checked + label{
            background-color: $button;
            color: $white;
        }
        */

        &>label {
            border: solid 1px $button;
            border-radius: 8px;
            padding: 0.5rem;
            min-width: 80px;
            text-align: center;
            cursor: pointer;

            &.correct {
                background-color: $green !important;
                color: $font !important;
                border: solid 1px transparent;
            }

            &.incorrect {
                background-color: $red !important;
                color: $font !important;
                border: solid 1px transparent;
                opacity: 0.5;
            }

            &.chosen {
                background-color: $button;
                color: $white;
            }

            &.notChosen {
                opacity: 0.5;
            }

            &:hover:not(.chosen) {
                border: solid 1px transparent;
                background-color: $select;
            }
        }

        &>div {
            position: absolute;
            top: 0;
            bottom: 0;
            left: 0;
            right: 0;
            z-index: 1;
            background-color: transparent;
        }
    }
}

.button,
.button a {
    color: $white;
    font-weight: 700;
    font-size: 1.2rem;

    background-color: $button;
    border: none;

    max-width: 200px;
    border-radius: 8px;
    padding: 0.5rem;
    cursor: pointer;

    &:hover {
        background-color: $select;
        color: $font;
    }
}

.answersChecked {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    gap: 1rem;

    color: $font;
    font-size: 0.85rem;

    position: relative;

    @include breakpoint-up(medium) {
        flex-direction: row;
        gap: 2rem;
        font-size: 1.2rem;
    }

    &>div {
        position: absolute;
        top: 0;
        bottom: 0;
        left: 0;
        right: 0;
        z-index: 1;
        background-color: transparent;
    }
}

.spinner {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);

    display: inline-block;
    width: 80px;
    height: 80px;

    &::after{
        content: ' ';
        display: block;
        width: 64px;
        height: 64px;
        margin: 8px;
        border-radius: 50%;
        border: 6px solid $font;
        border-color: $font transparent $font transparent;
        animation: spinner 1.2s linear infinite;
    }
}

@keyframes spinner {
    0% {
        transform: rotate(0deg);
    }

    100% {
        transform: rotate(360deg);
    }
}